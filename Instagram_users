# use ig_clone;
#1 Create an ER diagram or draw a schema for the given database.
-- ER stands for Entity Realationship between more tables to provide visual representation of table models.

#2 We want to reward the user who has been around the longest, Find the 5 oldest users.

create temporary table user_name(
 select * from users limit 5 );
 select * from user_name;
 
 
#3 To understand when to run the ad campaign, figure out the day of the week most users
 register on? 

 create view  users_campagin as (
 select dayname(created_at),count(*)as most_user_register from users 
 group by dayname(created_at)
 order by most_user_register desc
 )
 select * from user_campagin;
 
# To target inactive users in an email ad campaign, find the users 
who have never posted a photo.--# (use users,photos tables)

select * from users
use ig_clone
drop procedure if exists inactive_users
delimiter $$
create procedure inactive_user()
begin
select distinct(p.user_id) from users u inner join (select * from photos)as p
on p.id=u.id  
group by p.user_id;
end $$
delimiter ;
call inactive_user ();
            
    # subquery   

  select id from users where id not in(select user_id from photos) 
  group by id;

#5 Suppose you are running a contest to find out who got the most likes on a photo. 
Find out who won?--# (use likes tables)

select count(*) as total_likes, user_id from likes 
group by user_id 
order by total_likes desc;
 

#6 The investors want to know how many times does the average user post.
 
  with cte as  (
 select user_id,count(*)as total from photos 
 group by user_id
 )
 select avg(total) from cte

 

#7 A brand wants to know which hashtag to use on a post, and find the top 5 most used 
hashtags.

select count(pt.photo_id)as pho_count,t.tag_name as hastag_name  from tags t 
inner join photo_tags pt on pt.photo_id=t.id 
group by t.tag_name
order by pho_count desc limit 5;


# 8 To find out if there are bots, find users who have liked every single photo
 on the site.

 select u.username,count(u.id) as total_likes from users u
 inner  join likes l on l.user_id=u.id       
 group by l.user_id
 having total_likes=(select count(*) from photos)
 
 # subquery 

 select distinct(id)as like_total, username, (
 select user_id from likes  where user_id in(select count(user_id) from photos)) as done
 from users   
 group by id
 having like_total
 having like_total=select * from photos
 
 
 select count(user_id) as total from likes where id in(
 select id from users)
 having total=select count(*) from photos
 select count(*) from photos
 

#9 To know who the celebrities are, find users who have never commented on a photo.

    select distinct(u.username),c.comment_text as never_coment_pho from users u
    left join comments c on c.user_id=u.id
    where c.comment_text is  null; 
   
#10 Now it's time to find both of them together, find the users
 who have never commented on any photo or have commented on every photo.
 
 select u.username,c.comment_text as comnt_photos from users u
 left join comments c on  u.id=c.user_id 
 group by u.id
 having c.comment_text is null or comment_text is not null
